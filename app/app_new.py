import streamlit as st
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image
import time
import json
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

# Importar sistema manager
from system_manager import SkinCancerDiagnosisSystem

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de Diagn√≥stico de C√°ncer de Piel - Versi√≥n 2.0",
    page_icon="ü©∫",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #2E8B57;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metrics-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #2E8B57;
        margin-bottom: 1rem;
    }
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
        color: #856404;
    }
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
        color: #155724;
    }
    .error-box {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
        color: #721c24;
    }
    .metric-container {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Header
st.markdown('<div class="main-header">ü©∫ Sistema de Diagn√≥stico de C√°ncer de Piel v2.0</div>', unsafe_allow_html=True)
st.markdown('<div class="success-box">üî¨ <strong>Sistema Completamente Automatizado</strong> - Evaluaci√≥n con Dataset Real ISIC</div>', unsafe_allow_html=True)

# Configurar sistema
@st.cache_resource
def initialize_system():
    """Inicializa el sistema de diagn√≥stico"""
    try:
        system = SkinCancerDiagnosisSystem()
        if system.initialize_components():
            return system
        else:
            st.error("‚ùå Error inicializando el sistema")
            return None
    except Exception as e:
        st.error(f"‚ùå Error al inicializar el sistema: {str(e)}")
        return None

@st.cache_data
def get_system_status():
    """Obtiene el estado del sistema"""
    system = initialize_system()
    if system:
        return system.get_system_status()
    return {}

# Sidebar
st.sidebar.title("üìã Navegaci√≥n")
page = st.sidebar.selectbox(
    "Selecciona una secci√≥n:",
    ["üè† Inicio", "üîç Diagn√≥stico", "üìä Evaluaci√≥n de Modelos", "üìà Visualizaciones", "üìÑ Generar Reporte"]
)

# Inicializar sistema
system = initialize_system()

if page == "üè† Inicio":
    st.markdown("## üè† Bienvenido al Sistema de Diagn√≥stico de C√°ncer de Piel")
    
    # Obtener estado del sistema
    status = get_system_status()
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"""
        <div class="metrics-card">
            <h3>ü§ñ Modelos Disponibles</h3>
            <p><strong>Total:</strong> {status.get('models_loaded', 0)}</p>
            <ul>
        """, unsafe_allow_html=True)
        
        for model_name in status.get('models_available', []):
            st.markdown(f"<li>{model_name}</li>", unsafe_allow_html=True)
        
        st.markdown("""
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="metrics-card">
            <h3>üìä Dataset de Evaluaci√≥n</h3>
            <p><strong>ISIC Dataset de Test</strong></p>
            <p>‚Ä¢ Im√°genes reales de lesiones cut√°neas</p>
            <p>‚Ä¢ Casos benignos y malignos</p>
            <p>‚Ä¢ Evaluaci√≥n objetiva sin datos simulados</p>
            <p>‚Ä¢ Dataset disponible: {'‚úÖ' if status.get('test_dataset_available') else '‚ùå'}</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="metrics-card">
            <h3>‚ö° Caracter√≠sticas</h3>
            <p>‚Ä¢ M√©tricas calculadas en tiempo real</p>
            <p>‚Ä¢ An√°lisis estad√≠stico avanzado</p>
            <p>‚Ä¢ Visualizaciones interactivas</p>
            <p>‚Ä¢ Reportes PDF completos</p>
            <p>‚Ä¢ Sistema completamente automatizado</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Informaci√≥n del sistema
    st.markdown("## üîß Estado del Sistema")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### ü§ñ Modelos Cargados")
        if status.get('models_loaded', 0) > 0:
            for model_name in status.get('models_available', []):
                st.success(f"‚úÖ {model_name}")
                
            # Mostrar mejor modelo si est√° disponible
            if 'best_model' in status:
                best_model = status['best_model']
                st.info(f"üèÜ **Mejor modelo:** {best_model['name']} (MCC: {best_model['mcc']:.3f})")
        else:
            st.error("‚ùå No se cargaron modelos")
    
    with col2:
        st.markdown("### üìä Cache de M√©tricas")
        if status.get('metrics_cached', 0) > 0:
            st.success(f"‚úÖ M√©tricas disponibles para {status['metrics_cached']} modelos")
            
            if status.get('last_evaluation'):
                st.info(f"üìÖ √öltima evaluaci√≥n: {status['last_evaluation'][:19].replace('T', ' ')}")
        else:
            st.warning("‚ö†Ô∏è No hay m√©tricas en cache. Ejecuta la evaluaci√≥n primero.")
        
        st.markdown("### üîß Componentes del Sistema")
        components = [
            ("Evaluador", status.get('evaluator_ready', False)),
            ("Visualizador", status.get('visualizer_ready', False)),
            ("Generador PDF", status.get('pdf_generator_ready', False))
        ]
        
        for name, ready in components:
            if ready:
                st.success(f"‚úÖ {name}")
            else:
                st.error(f"‚ùå {name}")
    
    # Informaci√≥n de uso
    st.markdown("## üìñ C√≥mo usar el sistema")
    st.markdown("""
    ### üîç Para Diagn√≥stico:
    1. **Ve a la secci√≥n "Diagn√≥stico"**
    2. **Sube una imagen** de lesi√≥n cut√°nea
    3. **El sistema seleccionar√° autom√°ticamente el mejor modelo**
    4. **Haz clic en "Realizar Diagn√≥stico"**
    5. **Revisa los resultados** y la interpretaci√≥n
    
    ### üìä Para Evaluaci√≥n:
    1. **Ve a "Evaluaci√≥n de Modelos"**
    2. **Haz clic en "Evaluar Todos los Modelos"**
    3. **Revisa las m√©tricas** y comparaciones estad√≠sticas
    
    ### üìà Para Visualizaciones:
    1. **Aseg√∫rate de tener m√©tricas evaluadas**
    2. **Ve a "Visualizaciones"**
    3. **Selecciona los gr√°ficos** que deseas ver
    
    ### üìÑ Para Reportes:
    1. **Ve a "Generar Reporte"**
    2. **Configura las opciones** del reporte
    3. **Genera el PDF** con todos los resultados
    """)
    
    st.markdown("---")
    
    # Versi√≥n del sistema
    st.markdown(f"**Versi√≥n del Sistema:** {status.get('system_version', 'N/A')}")
    
    # Disclaimer m√©dico
    st.markdown("""
    <div class="warning-box">
        <strong>‚ö†Ô∏è IMPORTANTE:</strong><br>
        Este sistema es solo para fines educativos y de investigaci√≥n.<br>
        <strong>NO reemplaza el diagn√≥stico m√©dico profesional.</strong><br>
        Siempre consulte a un profesional m√©dico calificado para diagn√≥sticos reales.
    </div>
    """, unsafe_allow_html=True)

elif page == "üîç Diagn√≥stico":
    st.markdown("## üîç Diagn√≥stico de Imagen")
    
    if not system:
        st.error("‚ùå Sistema no disponible")
        st.stop()
    
    # Obtener informaci√≥n de modelos
    models_info = system.get_models_info()
    
    if not models_info:
        st.error("‚ùå No hay modelos disponibles para diagn√≥stico")
        st.stop()
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.markdown("### üìÅ Cargar Imagen")
        uploaded_file = st.file_uploader(
            "Selecciona una imagen de lesi√≥n cut√°nea",
            type=['jpg', 'jpeg', 'png'],
            help="Formatos soportados: JPG, JPEG, PNG"
        )
        
        if uploaded_file is not None:
            # Mostrar imagen cargada
            image = Image.open(uploaded_file)
            st.image(image, caption="Imagen cargada", use_column_width=True)
            
            # Mostrar informaci√≥n del mejor modelo
            status = get_system_status()
            if 'best_model' in status:
                best_model = status['best_model']
                st.info(f"üèÜ Usando el mejor modelo: **{best_model['name']}** (MCC: {best_model['mcc']:.3f})")
            
            # Selector de modelo (opcional)
            st.markdown("### ü§ñ Seleccionar Modelo (Opcional)")
            model_options = ["Autom√°tico (Mejor modelo)"] + list(models_info.keys())
            selected_model = st.selectbox(
                "Elige el modelo para diagn√≥stico:",
                model_options,
                help="Selecciona 'Autom√°tico' para usar el mejor modelo seg√∫n MCC"
            )
            
            # Bot√≥n de diagn√≥stico
            if st.button("üîç Realizar Diagn√≥stico", type="primary"):
                with st.spinner("Procesando imagen..."):
                    start_time = time.time()
                    
                    # Realizar predicci√≥n
                    model_name = None if selected_model == "Autom√°tico (Mejor modelo)" else selected_model
                    result = system.predict_single_image(image, model_name)
                    
                    processing_time = time.time() - start_time
                    
                    # Mostrar resultados en col2
                    with col2:
                        if 'error' in result:
                            st.error(f"‚ùå Error: {result['error']}")
                        else:
                            st.markdown("### üìä Resultados del Diagn√≥stico")
                            
                            # Mostrar diagn√≥stico
                            diagnosis = result['diagnosis']
                            confidence_percent = result['confidence_percent']
                            
                            if diagnosis == "Maligno":
                                st.error(f"üö® **Diagn√≥stico: {diagnosis}**")
                                st.error(f"‚ö†Ô∏è **Confianza: {confidence_percent:.1f}%**")
                            else:
                                st.success(f"‚úÖ **Diagn√≥stico: {diagnosis}**")
                                st.success(f"‚úÖ **Confianza: {confidence_percent:.1f}%**")
                            
                            # Informaci√≥n del modelo
                            st.info(f"ü§ñ **Modelo usado:** {result['model_used']}")
                            st.info(f"‚è±Ô∏è **Tiempo de procesamiento:** {processing_time:.2f} segundos")
                            st.info(f"üìä **Valor raw:** {result['raw_confidence']:.3f}")
                            
                            # M√©tricas del modelo
                            st.markdown("### üìà M√©tricas del Modelo")
                            model_metrics = result['model_metrics']
                            
                            col_a, col_b = st.columns(2)
                            
                            with col_a:
                                if model_metrics['accuracy'] != 'N/A':
                                    st.metric("Accuracy", f"{model_metrics['accuracy']:.3f}")
                                if model_metrics['precision'] != 'N/A':
                                    st.metric("Precision", f"{model_metrics['precision']:.3f}")
                            
                            with col_b:
                                if model_metrics['recall'] != 'N/A':
                                    st.metric("Recall", f"{model_metrics['recall']:.3f}")
                                if model_metrics['mcc'] != 'N/A':
                                    st.metric("MCC", f"{model_metrics['mcc']:.3f}")
                            
                            # Interpretaci√≥n
                            st.markdown("### üî¨ Interpretaci√≥n")
                            if confidence_percent > 75:
                                st.success("üéØ **Alta confianza** en el diagn√≥stico")
                            elif confidence_percent > 50:
                                st.warning("‚ö†Ô∏è **Confianza moderada** - considerar segunda opini√≥n")
                            else:
                                st.error("‚ùå **Baja confianza** - se requiere evaluaci√≥n m√©dica")
                            
                            # Disclaimer m√©dico
                            st.markdown("""
                            <div class="warning-box">
                                <strong>‚ö†Ô∏è IMPORTANTE:</strong><br>
                                Este sistema es solo para fines educativos y de investigaci√≥n.<br>
                                <strong>NO reemplaza el diagn√≥stico m√©dico profesional.</strong><br>
                                Siempre consulte a un profesional m√©dico calificado.
                            </div>
                            """, unsafe_allow_html=True)

elif page == "üìä Evaluaci√≥n de Modelos":
    st.markdown("## üìä Evaluaci√≥n Completa de Modelos")
    
    if not system:
        st.error("‚ùå Sistema no disponible")
        st.stop()
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.markdown("### ‚öôÔ∏è Configuraci√≥n de Evaluaci√≥n")
        
        # Opci√≥n para forzar rec√°lculo
        force_refresh = st.checkbox(
            "üîÑ Forzar rec√°lculo de m√©tricas",
            value=False,
            help="Marca esto para recalcular todas las m√©tricas desde cero"
        )
        
        # Bot√≥n de evaluaci√≥n
        if st.button("üöÄ Evaluar Todos los Modelos", type="primary"):
            with st.spinner("Evaluando modelos en dataset de test..."):
                try:
                    # Ejecutar evaluaci√≥n completa
                    metrics = system.evaluate_models(force_refresh=force_refresh)
                    
                    if metrics:
                        st.success(f"‚úÖ Evaluaci√≥n completada: {len(metrics)} modelos")
                        
                        # Recargar datos del sistema
                        st.cache_data.clear()
                        st.rerun()
                    else:
                        st.error("‚ùå No se pudieron obtener m√©tricas")
                        
                except Exception as e:
                    st.error(f"‚ùå Error durante la evaluaci√≥n: {str(e)}")
    
    with col2:
        # Mostrar m√©tricas existentes
        summary = system.get_evaluation_summary()
        
        if 'error' not in summary:
            st.markdown("### üìä Resumen de Evaluaci√≥n")
            
            # M√©tricas principales
            col_a, col_b, col_c = st.columns(3)
            
            with col_a:
                st.metric("Modelos Evaluados", summary['total_models'])
                st.metric("Muestras de Test", f"{summary['test_samples']:,}")
            
            with col_b:
                st.metric("Accuracy Promedio", f"{summary['average_accuracy']:.3f}")
                st.metric("MCC Promedio", f"{summary['average_mcc']:.3f}")
            
            with col_c:
                best_model = summary['best_model']
                st.metric("Mejor Modelo", best_model['name'])
                st.metric("MCC del Mejor", f"{best_model['mcc']:.3f}")
            
            # Tabla de m√©tricas
            st.markdown("### üìã Tabla de M√©tricas Detalladas")
            
            # Crear DataFrame para mostrar
            metrics_data = []
            for model_name, mcc in summary['model_rankings']:
                metrics_data.append({
                    'Modelo': model_name,
                    'MCC': f"{mcc:.3f}",
                    'Ranking': f"#{summary['model_rankings'].index((model_name, mcc)) + 1}"
                })
            
            df_metrics = pd.DataFrame(metrics_data)
            st.dataframe(df_metrics, use_container_width=True)
            
            # Informaci√≥n del dataset
            st.markdown("### üìã Informaci√≥n del Dataset")
            class_dist = summary['class_distribution']
            
            col_a, col_b = st.columns(2)
            
            with col_a:
                st.metric("Casos Benignos", f"{class_dist[0]:,}")
                benign_pct = class_dist[0] / summary['test_samples'] * 100
                st.metric("% Benignos", f"{benign_pct:.1f}%")
            
            with col_b:
                st.metric("Casos Malignos", f"{class_dist[1]:,}")
                malign_pct = class_dist[1] / summary['test_samples'] * 100
                st.metric("% Malignos", f"{malign_pct:.1f}%")
            
            # √öltima evaluaci√≥n
            if summary.get('last_evaluation'):
                st.info(f"üìÖ √öltima evaluaci√≥n: {summary['last_evaluation'][:19].replace('T', ' ')}")
        
        else:
            st.warning("‚ö†Ô∏è No hay m√©tricas disponibles. Ejecuta la evaluaci√≥n primero.")

elif page == "üìà Visualizaciones":
    st.markdown("## üìà Visualizaciones Avanzadas")
    
    if not system:
        st.error("‚ùå Sistema no disponible")
        st.stop()
    
    # Verificar si hay m√©tricas
    summary = system.get_evaluation_summary()
    
    if 'error' in summary:
        st.warning("‚ö†Ô∏è No hay m√©tricas disponibles. Ejecuta la evaluaci√≥n primero.")
        st.stop()
    
    # Sidebar para seleccionar visualizaciones
    st.sidebar.markdown("### üìä Seleccionar Visualizaciones")
    
    show_confusion_matrices = st.sidebar.checkbox("üéØ Matrices de Confusi√≥n", True)
    show_metrics_comparison = st.sidebar.checkbox("üìä Comparaci√≥n de M√©tricas", True)
    show_roc_curves = st.sidebar.checkbox("üìà Curvas ROC", True)
    show_radar_chart = st.sidebar.checkbox("üé™ Gr√°fico de Radar", True)
    show_mcc_comparison = st.sidebar.checkbox("‚ö° Comparaci√≥n MCC", True)
    
    # Generar visualizaciones
    if st.button("üìä Generar Visualizaciones", type="primary"):
        with st.spinner("Generando visualizaciones..."):
            result = system.generate_visualizations(save_plots=True)
            
            if result.get('success'):
                st.success(f"‚úÖ Visualizaciones generadas: {len(result.get('files_saved', []))} archivos")
            else:
                st.error(f"‚ùå Error: {result.get('error', 'Error desconocido')}")
    
    # Mostrar visualizaciones seleccionadas
    if system.visualizer:
        if show_confusion_matrices:
            st.markdown("### üéØ Matrices de Confusi√≥n")
            
            # Selector de modelo para matriz individual
            models_available = list(system.metrics_cache.keys())
            selected_model = st.selectbox(
                "Selecciona un modelo para ver su matriz de confusi√≥n:",
                models_available
            )
            
            # Mostrar matriz seleccionada
            fig_cm = system.visualizer.plot_confusion_matrix(selected_model, save=False)
            if fig_cm:
                st.pyplot(fig_cm)
                plt.close(fig_cm)
            
            # Mostrar comparaci√≥n de todas las matrices
            st.markdown("#### üìä Comparaci√≥n de Todas las Matrices")
            fig_cm_comp = system.visualizer.plot_confusion_matrices_comparison(save=False)
            if fig_cm_comp:
                st.pyplot(fig_cm_comp)
                plt.close(fig_cm_comp)
        
        if show_metrics_comparison:
            st.markdown("### üìä Comparaci√≥n de M√©tricas")
            fig_metrics = system.visualizer.plot_metrics_comparison(save=False)
            if fig_metrics:
                st.pyplot(fig_metrics)
                plt.close(fig_metrics)
        
        if show_roc_curves:
            st.markdown("### üìà Curvas ROC")
            fig_roc = system.visualizer.plot_roc_curves(save=False)
            if fig_roc:
                st.pyplot(fig_roc)
                plt.close(fig_roc)
        
        if show_radar_chart:
            st.markdown("### üé™ Gr√°fico de Radar - Rendimiento")
            fig_radar = system.visualizer.plot_performance_radar(save=False)
            if fig_radar:
                st.pyplot(fig_radar)
                plt.close(fig_radar)
        
        if show_mcc_comparison:
            st.markdown("### ‚ö° Comparaci√≥n MCC")
            fig_mcc = system.visualizer.plot_mcc_comparison(save=False)
            if fig_mcc:
                st.pyplot(fig_mcc)
                plt.close(fig_mcc)
        
        # Tabla de m√©tricas detalladas
        st.markdown("### üìã Tabla de M√©tricas Detalladas")
        df_detailed = system.visualizer.create_metrics_summary_table()
        st.dataframe(df_detailed, use_container_width=True)
        
        # Insights autom√°ticos
        st.markdown("### üí° Insights Autom√°ticos")
        insights = system.visualizer.generate_insights()
        for insight in insights:
            st.info(insight)
    
    else:
        st.error("‚ùå Visualizador no disponible")

elif page == "üìÑ Generar Reporte":
    st.markdown("## üìÑ Generador de Reportes PDF")
    
    if not system:
        st.error("‚ùå Sistema no disponible")
        st.stop()
    
    # Verificar si hay m√©tricas
    summary = system.get_evaluation_summary()
    
    if 'error' in summary:
        st.warning("‚ö†Ô∏è No hay m√©tricas disponibles. Ejecuta la evaluaci√≥n primero.")
        st.stop()
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.markdown("### ‚öôÔ∏è Configuraci√≥n del Reporte")
        
        # T√≠tulo del reporte
        report_title = st.text_input(
            "T√≠tulo del Reporte",
            value="Reporte de Evaluaci√≥n - Sistema de Diagn√≥stico de C√°ncer de Piel",
            help="T√≠tulo que aparecer√° en el reporte PDF"
        )
        
        # Nombre del archivo
        output_filename = st.text_input(
            "Nombre del Archivo",
            value="reporte_evaluacion.pdf",
            help="Nombre del archivo PDF generado"
        )
        
        # Opciones del reporte
        include_plots = st.checkbox(
            "üñºÔ∏è Incluir Visualizaciones",
            value=True,
            help="Incluir gr√°ficos y visualizaciones en el reporte"
        )
        
        # Informaci√≥n del reporte
        st.markdown("### üìã Contenido del Reporte")
        st.markdown(f"""
        **Modelos evaluados:** {summary['total_models']}
        **Muestras de test:** {summary['test_samples']:,}
        **Mejor modelo:** {summary['best_model']['name']}
        **An√°lisis estad√≠stico:** Pruebas McNemar
        **Visualizaciones:** {6 if include_plots else 0}
        """)
    
    with col2:
        # Bot√≥n para generar reporte
        if st.button("üìÑ Generar Reporte PDF", type="primary"):
            with st.spinner("Generando reporte completo..."):
                try:
                    result = system.generate_complete_report(
                        title=report_title,
                        include_images=include_plots,
                        filename=output_filename
                    )
                    
                    if result.get('success'):
                        st.success("‚úÖ Reporte generado exitosamente")
                        
                        # Informaci√≥n del archivo
                        st.markdown("### üìÑ Informaci√≥n del Archivo")
                        st.info(f"üìÅ **Archivo:** {result['filename']}")
                        st.info(f"üìç **Ubicaci√≥n:** {result['output_path']}")
                        st.info(f"üïê **Generado:** {result['report_timestamp'][:19].replace('T', ' ')}")
                        
                        # Bot√≥n de descarga (si es posible)
                        if Path(result['output_path']).exists():
                            with open(result['output_path'], "rb") as pdf_file:
                                st.download_button(
                                    label="üì• Descargar Reporte PDF",
                                    data=pdf_file.read(),
                                    file_name=result['filename'],
                                    mime="application/pdf"
                                )
                    else:
                        st.error(f"‚ùå Error generando reporte: {result.get('error', 'Error desconocido')}")
                
                except Exception as e:
                    st.error(f"‚ùå Error durante la generaci√≥n: {str(e)}")
        
        # Mostrar reportes anteriores
        st.markdown("### üìö Reportes Anteriores")
        reports_dir = Path("app/reports")
        if reports_dir.exists():
            pdf_files = list(reports_dir.glob("*.pdf"))
            if pdf_files:
                for pdf_file in sorted(pdf_files, key=lambda x: x.stat().st_mtime, reverse=True)[:5]:
                    file_info = pdf_file.stat()
                    size_mb = file_info.st_size / (1024 * 1024)
                    mod_time = time.ctime(file_info.st_mtime)
                    
                    st.info(f"üìÑ **{pdf_file.name}** ({size_mb:.1f} MB) - {mod_time}")
            else:
                st.info("üìÅ No hay reportes anteriores")
        else:
            st.info("üìÅ Directorio de reportes no encontrado")

# Footer
st.markdown("---")
st.markdown("### üîß Herramientas del Sistema")

col1, col2, col3 = st.columns(3)

with col1:
    if st.button("üîÑ Limpiar Cache", help="Limpia el cache del sistema"):
        if system:
            system.cleanup_cache()
            st.cache_data.clear()
            st.cache_resource.clear()
            st.success("‚úÖ Cache limpiado")
            st.rerun()

with col2:
    if st.button("üìä Estado del Sistema", help="Muestra informaci√≥n del sistema"):
        status = get_system_status()
        st.json(status)

with col3:
    if st.button("‚ÑπÔ∏è Informaci√≥n", help="Informaci√≥n del sistema"):
        st.info("Sistema de Diagn√≥stico de C√°ncer de Piel v2.0")
        st.info("Desarrollado para evaluaci√≥n autom√°tica de modelos de IA")
        st.info("Dataset: ISIC (International Skin Imaging Collaboration)")
