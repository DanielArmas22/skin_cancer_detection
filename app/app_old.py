import streamlit as st
import os
import cv2
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
import tensorflow as tf
from system_manager import SkinCancerDiagnosisSystem
import time
import json
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de Diagn√≥stico de C√°ncer de Piel - Evaluaci√≥n Real",
    page_icon="ü©∫",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #2E8B57;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metrics-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #2E8B57;
        margin: 1rem 0;
    }
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 0.5rem;
        padding: 1rem;
        margin: 1rem 0;
    }
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 0.5rem;
        padding: 1rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# T√≠tulo principal
st.markdown('<h1 class="main-header">üéØ Sistema de Diagn√≥stico de C√°ncer de Piel</h1>', unsafe_allow_html=True)
st.markdown('<div class="success-box">üî¨ <strong>Evaluaci√≥n con Dataset Real ISIC</strong> - Sin datos simulados o hardcodeados</div>', unsafe_allow_html=True)

# Configurar sistema
@st.cache_resource
def initialize_system():
    """Inicializa el sistema de diagn√≥stico"""
    try:
        system = SkinCancerDiagnosisSystem()
        if system.initialize_components():
            return system
        else:
            st.error("‚ùå Error inicializando el sistema")
            return None
    except Exception as e:
        st.error(f"‚ùå Error al inicializar el sistema: {str(e)}")
        return None

@st.cache_data
def get_system_status():
    """Obtiene el estado del sistema"""
    system = initialize_system()
    if system:
        return system.get_system_status()
    return {}

# Sidebar
st.sidebar.title("üìã Navegaci√≥n")
page = st.sidebar.selectbox(
    "Selecciona una secci√≥n:",
    ["üè† Inicio", "üîç Diagn√≥stico", "üìä Evaluaci√≥n de Modelos", "üìà Visualizaciones", "üìÑ Generar Reporte"]
)

# Inicializar sistema
system = initialize_system()

if page == "üè† Inicio":
    st.markdown("## üè† Bienvenido al Sistema de Diagn√≥stico de C√°ncer de Piel")
    
    # Obtener estado del sistema
    status = get_system_status()
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"""
        <div class="metrics-card">
            <h3>ü§ñ Modelos Disponibles</h3>
            <p><strong>Total:</strong> {status.get('models_loaded', 0)}</p>
            <ul>
        """, unsafe_allow_html=True)
        
        for model_name in status.get('models_available', []):
            st.markdown(f"<li>{model_name}</li>", unsafe_allow_html=True)
        
        st.markdown("""
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="metrics-card">
            <h3>üìä Dataset de Evaluaci√≥n</h3>
            <p><strong>ISIC Dataset de Test</strong></p>
            <p>‚Ä¢ Im√°genes reales de lesiones cut√°neas</p>
            <p>‚Ä¢ Casos benignos y malignos</p>
            <p>‚Ä¢ Evaluaci√≥n objetiva sin datos simulados</p>
            <p>‚Ä¢ Dataset disponible: {'‚úÖ' if status.get('test_dataset_available') else '‚ùå'}</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="metrics-card">
            <h3>‚ö° Caracter√≠sticas</h3>
            <p>‚Ä¢ M√©tricas calculadas en tiempo real</p>
            <p>‚Ä¢ An√°lisis estad√≠stico avanzado</p>
            <p>‚Ä¢ Visualizaciones interactivas</p>
            <p>‚Ä¢ Reportes PDF completos</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Informaci√≥n del sistema
    st.markdown("## üîß Estado del Sistema")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### ü§ñ Modelos Cargados")
        if models:
            for model_name, model in models.items():
                model_info = get_model_info(model)
                st.success(f"‚úÖ {model_name}: {model_info['parameters']:,} par√°metros")
        else:
            st.error("‚ùå No se cargaron modelos")
    
    with col2:
        st.markdown("### üìä Cache de M√©tricas")
        metrics = load_model_metrics()
        if metrics:
            st.success(f"‚úÖ M√©tricas disponibles para {len(metrics)} modelos")
            for model_name, model_metrics in metrics.items():
                st.info(f"üìà {model_name}: MCC = {model_metrics['mcc']:.3f}")
        else:
            st.warning("‚ö†Ô∏è No hay m√©tricas en cache. Ejecuta la evaluaci√≥n primero.")

elif page == "üîç Diagn√≥stico":
    st.markdown("## üîç Diagn√≥stico de Imagen")
    
    if not models:
        st.error("‚ùå No hay modelos disponibles para diagn√≥stico")
        st.stop()
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.markdown("### üìÅ Cargar Imagen")
        uploaded_file = st.file_uploader(
            "Selecciona una imagen de lesi√≥n cut√°nea",
            type=['jpg', 'jpeg', 'png'],
            help="Formatos soportados: JPG, JPEG, PNG"
        )
        
        if uploaded_file is not None:
            # Mostrar imagen cargada
            image = Image.open(uploaded_file)
            st.image(image, caption="Imagen cargada", use_column_width=True)
            
            # Selector de modelo
            st.markdown("### ü§ñ Seleccionar Modelo")
            selected_model = st.selectbox(
                "Elige el modelo para diagn√≥stico:",
                list(models.keys()),
                help="Selecciona el modelo que deseas usar para el diagn√≥stico"
            )
            
            # Bot√≥n de diagn√≥stico
            if st.button("üîç Realizar Diagn√≥stico", type="primary"):
                with st.spinner("Procesando imagen..."):
                    # Preprocesar imagen
                    processed_image = preprocess_image(image)
                    
                    # Realizar predicci√≥n
                    start_time = time.time()
                    diagnosis, confidence_percent, raw_confidence = predict_image(
                        models[selected_model], processed_image
                    )
                    processing_time = time.time() - start_time
                    
                    # Mostrar resultados en col2
                    with col2:
                        st.markdown("### üìä Resultados del Diagn√≥stico")
                        
                        # Mostrar diagn√≥stico
                        if diagnosis == "Maligno":
                            st.error(f"üö® **Diagn√≥stico: {diagnosis}**")
                            st.error(f"‚ö†Ô∏è **Confianza: {confidence_percent:.1f}%**")
                        else:
                            st.success(f"‚úÖ **Diagn√≥stico: {diagnosis}**")
                            st.success(f"‚úÖ **Confianza: {confidence_percent:.1f}%**")
                        
                        # Informaci√≥n adicional
                        st.info(f"ü§ñ **Modelo usado:** {selected_model}")
                        st.info(f"‚è±Ô∏è **Tiempo de procesamiento:** {processing_time:.2f} segundos")
                        st.info(f"üìä **Valor raw:** {raw_confidence:.3f}")
                        
                        # Interpretaci√≥n
                        st.markdown("### üî¨ Interpretaci√≥n")
                        if confidence_percent > 75:
                            st.success("üéØ **Alta confianza** en el diagn√≥stico")
                        elif confidence_percent > 50:
                            st.warning("‚ö†Ô∏è **Confianza moderada** - considerar segunda opini√≥n")
                        else:
                            st.error("‚ùå **Baja confianza** - se requiere evaluaci√≥n m√©dica")
                        
                        # Disclaimer m√©dico
                        st.markdown("""
                        <div class="warning-box">
                            <strong>‚ö†Ô∏è IMPORTANTE:</strong><br>
                            Este sistema es solo para fines educativos y de investigaci√≥n.<br>
                            <strong>NO reemplaza el diagn√≥stico m√©dico profesional.</strong><br>
                            Consulta siempre con un dermat√≥logo certificado.
                        </div>
                        """, unsafe_allow_html=True)
    
    with col2:
        if uploaded_file is None:
            st.markdown("### üìã Instrucciones")
            st.markdown("""
            1. **Carga una imagen** de lesi√≥n cut√°nea
            2. **Selecciona el modelo** que deseas usar
            3. **Haz clic en "Realizar Diagn√≥stico"**
            4. **Revisa los resultados** y la interpretaci√≥n
            
            **Recomendaciones para mejores resultados:**
            - Usa im√°genes de alta calidad
            - Aseg√∫rate de que la lesi√≥n sea visible
            - Evita im√°genes borrosas o con mala iluminaci√≥n
            """)

elif page == "üìä Evaluaci√≥n de Modelos":
    st.markdown("## üìä Evaluaci√≥n Completa de Modelos")
    
    # Inicializar evaluador
    evaluator = initialize_evaluator()
    
    if not evaluator:
        st.error("‚ùå No se pudo inicializar el evaluador")
        st.stop()
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.markdown("### ‚öôÔ∏è Configuraci√≥n de Evaluaci√≥n")
        
        # Opci√≥n para forzar rec√°lculo
        force_refresh = st.checkbox(
            "üîÑ Forzar rec√°lculo de m√©tricas",
            help="Marca esto para recalcular todas las m√©tricas desde cero"
        )
        
        # Bot√≥n de evaluaci√≥n
        if st.button("üöÄ Evaluar Todos los Modelos", type="primary"):
            with st.spinner("Evaluando modelos en dataset de test..."):
                try:
                    # Ejecutar evaluaci√≥n completa
                    all_metrics = evaluator.evaluate_all_models(force_refresh=force_refresh)
                    
                    if all_metrics:
                        st.success(f"‚úÖ Evaluaci√≥n completada: {len(all_metrics)} modelos")
                        
                        # Mostrar resumen
                        st.markdown("### üìà Resumen de Evaluaci√≥n")
                        
                        # Encontrar mejor modelo
                        best_model = max(all_metrics.items(), key=lambda x: x[1]['mcc'])
                        st.success(f"üèÜ **Mejor modelo:** {best_model[0]} (MCC: {best_model[1]['mcc']:.3f})")
                        
                        # Mostrar m√©tricas b√°sicas
                        for model_name, metrics in all_metrics.items():
                            with st.expander(f"üìä {model_name}", expanded=False):
                                col_a, col_b = st.columns(2)
                                
                                with col_a:
                                    st.metric("Accuracy", f"{metrics['accuracy']:.3f}")
                                    st.metric("Precision", f"{metrics['precision']:.3f}")
                                    st.metric("Recall", f"{metrics['recall']:.3f}")
                                    st.metric("F1-Score", f"{metrics['f1_score']:.3f}")
                                
                                with col_b:
                                    st.metric("MCC", f"{metrics['mcc']:.3f}")
                                    st.metric("AUC-ROC", f"{metrics['auc_roc']:.3f}")
                                    st.metric("Sensitivity", f"{metrics['sensitivity']:.3f}")
                                    st.metric("Specificity", f"{metrics['specificity']:.3f}")
                        
                        # Guardar m√©tricas en session state
                        st.session_state.model_metrics = all_metrics
                        
                    else:
                        st.error("‚ùå No se pudieron obtener m√©tricas")
                        
                except Exception as e:
                    st.error(f"‚ùå Error durante la evaluaci√≥n: {str(e)}")
    
    with col2:
        # Mostrar m√©tricas existentes
        metrics = load_model_metrics()
        
        if metrics:
            st.markdown("### üìä M√©tricas Actuales")
            
            # Crear DataFrame para mostrar tabla
            df_metrics = pd.DataFrame.from_dict(metrics, orient='index')
            
            # Seleccionar columnas importantes
            display_cols = ['accuracy', 'precision', 'recall', 'f1_score', 'mcc', 'auc_roc']
            df_display = df_metrics[display_cols].round(3)
            
            # Mostrar tabla
            st.dataframe(df_display, use_container_width=True)
            
            # Informaci√≥n adicional
            st.markdown("### üìã Informaci√≥n del Dataset")
            first_model = list(metrics.values())[0]
            
            col_a, col_b = st.columns(2)
            
            with col_a:
                st.metric("Total de Muestras", f"{first_model['test_samples']:,}")
                st.metric("Casos Benignos", f"{first_model['class_distribution'][0]:,}")
            
            with col_b:
                st.metric("Casos Malignos", f"{first_model['class_distribution'][1]:,}")
                benign_pct = first_model['class_distribution'][0] / first_model['test_samples'] * 100
                st.metric("% Benignos", f"{benign_pct:.1f}%")
            
            # Comparaci√≥n estad√≠stica
            st.markdown("### üìä Comparaci√≥n Estad√≠stica")
            comparison_results = evaluator.load_comparison_results()
            
            if comparison_results:
                st.markdown("**Pruebas de McNemar:**")
                
                for comparison, result in comparison_results.items():
                    if result:
                        models = comparison.split(' vs ')
                        better_model = models[0] if result.get('model1_better', False) else models[1]
                        
                        if result['significant']:
                            st.success(f"‚úÖ {comparison}: **{better_model}** es significativamente mejor (p={result['p_value']:.3f})")
                        else:
                            st.info(f"‚ÑπÔ∏è {comparison}: No hay diferencia significativa (p={result['p_value']:.3f})")
            
        else:
            st.warning("‚ö†Ô∏è No hay m√©tricas disponibles. Ejecuta la evaluaci√≥n primero.")

elif page == "üìà Visualizaciones":
    st.markdown("## üìà Visualizaciones Avanzadas")
    
    # Cargar m√©tricas
    metrics = load_model_metrics()
    
    if not metrics:
        st.warning("‚ö†Ô∏è No hay m√©tricas disponibles. Ejecuta la evaluaci√≥n primero.")
        st.stop()
    
    # Inicializar visualizador
    visualizer = MetricsVisualizer(metrics)
    
    # Sidebar para seleccionar visualizaciones
    st.sidebar.markdown("### üìä Seleccionar Visualizaciones")
    
    show_confusion_matrices = st.sidebar.checkbox("üéØ Matrices de Confusi√≥n", True)
    show_metrics_comparison = st.sidebar.checkbox("üìä Comparaci√≥n de M√©tricas", True)
    show_roc_curves = st.sidebar.checkbox("üìà Curvas ROC", True)
    show_radar_chart = st.sidebar.checkbox("üé™ Gr√°fico de Radar", True)
    show_mcc_comparison = st.sidebar.checkbox("‚ö° Comparaci√≥n MCC", True)
    
    # Mostrar visualizaciones seleccionadas
    if show_confusion_matrices:
        st.markdown("### üéØ Matrices de Confusi√≥n")
        
        # Selector de modelo para matriz individual
        selected_model = st.selectbox(
            "Selecciona un modelo para ver su matriz de confusi√≥n:",
            list(metrics.keys())
        )
        
        # Mostrar matriz seleccionada
        fig_cm = visualizer.plot_confusion_matrix(selected_model)
        if fig_cm:
            st.pyplot(fig_cm)
        
        # Mostrar comparaci√≥n de todas las matrices
        st.markdown("#### üìä Comparaci√≥n de Todas las Matrices")
        fig_cm_comp = visualizer.plot_confusion_matrices_comparison()
        if fig_cm_comp:
            st.pyplot(fig_cm_comp)
    
    if show_metrics_comparison:
        st.markdown("### üìä Comparaci√≥n de M√©tricas")
        fig_metrics = visualizer.plot_metrics_comparison()
        if fig_metrics:
            st.pyplot(fig_metrics)
    
    if show_roc_curves:
        st.markdown("### üìà Curvas ROC")
        fig_roc = visualizer.plot_roc_curves()
        if fig_roc:
            st.pyplot(fig_roc)
    
    if show_radar_chart:
        st.markdown("### üé™ Gr√°fico de Radar - Rendimiento")
        fig_radar = visualizer.plot_performance_radar()
        if fig_radar:
            st.pyplot(fig_radar)
    
    if show_mcc_comparison:
        st.markdown("### ‚ö° Comparaci√≥n MCC")
        fig_mcc = visualizer.plot_mcc_comparison()
        if fig_mcc:
            st.pyplot(fig_mcc)
    
    # Tabla de m√©tricas detalladas
    st.markdown("### üìã Tabla de M√©tricas Detalladas")
    df_detailed = visualizer.create_metrics_summary_table()
    st.dataframe(df_detailed, use_container_width=True)
    
    # Insights autom√°ticos
    st.markdown("### üîç Insights Autom√°ticos")
    insights = visualizer.generate_insights()
    
    for insight in insights:
        st.info(insight)
    
    # Bot√≥n para guardar todos los gr√°ficos
    if st.button("üíæ Guardar Todas las Visualizaciones"):
        with st.spinner("Guardando visualizaciones..."):
            saved_plots = visualizer.save_all_plots()
            if saved_plots:
                st.success(f"‚úÖ Se guardaron {len(saved_plots)} visualizaciones en app/plots/")
            else:
                st.error("‚ùå Error al guardar visualizaciones")

elif page == "üìÑ Generar Reporte":
    st.markdown("## üìÑ Generar Reporte PDF Completo")
    
    # Cargar m√©tricas
    metrics = load_model_metrics()
    
    if not metrics:
        st.warning("‚ö†Ô∏è No hay m√©tricas disponibles. Ejecuta la evaluaci√≥n primero.")
        st.stop()
    
    # Configuraci√≥n del reporte
    st.markdown("### ‚öôÔ∏è Configuraci√≥n del Reporte")
    
    col1, col2 = st.columns(2)
    
    with col1:
        report_title = st.text_input(
            "T√≠tulo del reporte:",
            "Reporte de Evaluacion de Modelos de Cancer de Piel"
        )
        
        include_plots = st.checkbox("üìä Incluir visualizaciones", True)
        include_methodology = st.checkbox("üìã Incluir metodolog√≠a", True)
        include_disclaimer = st.checkbox("‚ö†Ô∏è Incluir disclaimer m√©dico", True)
    
    with col2:
        output_filename = st.text_input(
            "Nombre del archivo:",
            "reporte_evaluacion_completo.pdf"
        )
        
        # Informaci√≥n del reporte
        st.markdown("#### üìä Contenido del Reporte")
        st.info(f"""
        **Modelos incluidos:** {len(metrics)}
        **M√©tricas por modelo:** 8+
        **An√°lisis estad√≠stico:** Pruebas McNemar
        **Visualizaciones:** {6 if include_plots else 0}
        """)
    
    # Bot√≥n para generar reporte
    if st.button("üìÑ Generar Reporte PDF", type="primary"):
        with st.spinner("Generando reporte completo..."):
            try:
                # Inicializar evaluador y visualizador
                evaluator = initialize_evaluator()
                visualizer = MetricsVisualizer(metrics)
                
                # Generar visualizaciones si se solicita
                plot_paths = None
                if include_plots:
                    plot_paths = visualizer.save_all_plots()
                
                # Cargar resultados de comparaci√≥n
                comparison_results = None
                if evaluator:
                    comparison_results = evaluator.load_comparisons()
                
                # Generar PDF
                pdf_generator = PDFReportGenerator()
                
                output_path = pdf_generator.generate_complete_report(
                    metrics_data=metrics,
                    comparison_data=comparison_results,
                    title=report_title,
                    include_images=include_plots,
                    output_filename=output_filename
                )
                
                if output_path and os.path.exists(output_path):
                    st.success(f"‚úÖ Reporte generado exitosamente: {output_path}")
                    
                    # Mostrar informaci√≥n del archivo
                    file_size = os.path.getsize(output_path) / 1024  # KB
                    st.info(f"üìÑ Tama√±o del archivo: {file_size:.1f} KB")
                    
                    # Bot√≥n de descarga
                    with open(output_path, "rb") as file:
                        st.download_button(
                            label="‚¨áÔ∏è Descargar Reporte PDF",
                            data=file.read(),
                            file_name=output_filename,
                            mime="application/pdf"
                        )
                    
                    # Mostrar preview del contenido
                    st.markdown("### üìã Contenido del Reporte Generado")
                    st.markdown("""
                    1. **P√°gina de T√≠tulo** - Informaci√≥n general
                    2. **Resumen Ejecutivo** - M√©tricas principales
                    3. **Informaci√≥n del Dataset** - Datos ISIC utilizados
                    4. **Metodolog√≠a** - Proceso de evaluaci√≥n
                    5. **An√°lisis Detallado** - Por cada modelo
                    6. **Comparaci√≥n Estad√≠stica** - Pruebas McNemar
                    7. **Visualizaciones** - Gr√°ficos y matrices
                    8. **Conclusiones** - Recomendaciones finales
                    9. **Disclaimer M√©dico** - Limitaciones y responsabilidades
                    """)
                    
                else:
                    st.error("‚ùå Error al generar el reporte PDF")
                    
            except Exception as e:
                st.error(f"‚ùå Error durante la generaci√≥n del reporte: {str(e)}")
    
    # Informaci√≥n adicional
    st.markdown("---")
    st.markdown("### ‚ÑπÔ∏è Informaci√≥n sobre el Reporte")
    st.markdown("""
    **Caracter√≠sticas del reporte:**
    - ‚úÖ Datos reales del dataset ISIC
    - ‚úÖ M√©tricas calculadas objetivamente
    - ‚úÖ An√°lisis estad√≠stico completo
    - ‚úÖ Visualizaciones profesionales
    - ‚úÖ Interpretaci√≥n m√©dica
    - ‚úÖ Recomendaciones basadas en evidencia
    
    **Uso recomendado:**
    - üìö Documentaci√≥n acad√©mica
    - üìä Presentaciones profesionales
    - üìã An√°lisis de rendimiento
    - üî¨ Investigaci√≥n cient√≠fica
    """)

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666; font-size: 0.9em;">
    <p>ü©∫ Sistema de Diagn√≥stico de C√°ncer de Piel - Versi√≥n Mejorada</p>
    <p>üìä Evaluaci√≥n con Dataset Real ISIC | üö´ Sin Datos Simulados</p>
    <p>‚ö†Ô∏è Solo para fines educativos y de investigaci√≥n</p>
</div>
""", unsafe_allow_html=True)
